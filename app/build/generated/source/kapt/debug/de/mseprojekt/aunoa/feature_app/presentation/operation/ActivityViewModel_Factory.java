// Generated by Dagger (https://dagger.dev).
package de.mseprojekt.aunoa.feature_app.presentation.operation;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import de.mseprojekt.aunoa.feature_app.domain.use_case.activity.OperationsUseCases;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ActivityViewModel_Factory implements Factory<OperationViewModel> {
  private final Provider<OperationsUseCases> operationsUseCasesProvider;

  public ActivityViewModel_Factory(Provider<OperationsUseCases> operationsUseCasesProvider) {
    this.operationsUseCasesProvider = operationsUseCasesProvider;
  }

  @Override
  public OperationViewModel get() {
    return newInstance(operationsUseCasesProvider.get());
  }

  public static ActivityViewModel_Factory create(
      Provider<OperationsUseCases> operationsUseCasesProvider) {
    return new ActivityViewModel_Factory(operationsUseCasesProvider);
  }

  public static OperationViewModel newInstance(OperationsUseCases operationsUseCases) {
    return new OperationViewModel(operationsUseCases);
  }
}
